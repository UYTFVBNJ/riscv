`timescale 1 ps/ 1 ps
`include "../src/common.v"

`define TESTBENCH_PWD "E:/test/riscv/fpga/testbench/"

module riscv_test();

	reg clk = 1'b0;
	reg rst = 1'b0;
	
	
	reg [`DATA_BUS] ram[128*1024-1:0];
	wire ram_mem_rw;
	wire [`DATA_BUS] ram_if_addr;
	wire [`DATA_BUS] ram_mem_addr, ram_mem_wdata;
	reg  [`DATA_BUS] ram_if_data, ram_mem_rdata;

	always @(posedge clk) begin
		ram_if_data <= ram[ram_if_addr[31:2]];
		if (ram_mem_rw == `MEM_READ)
			ram_mem_rdata <= ram[ram_mem_addr[31:2]];
		else
			ram[ram_mem_addr[31:2]] <= ram_mem_wdata;
	end
	
	riscv_core core(
		clk, rst,
		ram_if_addr, ram_if_data,
		ram_mem_rw, ram_mem_addr, ram_mem_rdata, ram_mem_wdata
	);

	// 全局状态
	// 当前测试的名称
	reg [30*8-1:0] testname;

	// 辅助函数
	task tick();
	begin
		#1 clk = 1;
		#1 clk = 0;
	end
	endtask
	task tickn(input integer n);
		integer i;
	begin
		for (i = 0; i < n; i = i + 1)
			tick();
	end
	endtask
	
	task reset();
		integer i;
	begin
		rst = 1'b1;
		tick();
		rst = 1'b0;
		
		for (i=0; i<128*1024; i=i+1)
			ram[i] = 0;
	end
	endtask

	task load(input reg [30*8-1:0] hexfile);
	begin
		$readmemh({`TESTBENCH_PWD, "/build/", hexfile}, ram);
		testname = hexfile;
	end
	endtask

	task run();
		integer i;
	begin
		for (i = 0; i < 100000; i = i + 1) begin
			tick();
			if (core.if_instr == 32'h7f2a214b) begin
				$display("%s terminated after %d steps", testname, i);
				disable run;
			end
			if (core.id_valid && core.id_error_o) begin
				$display("In %s:", testname);
				$display("Invalid instrction at %x", core.id_pc_i);
				$stop;
			end
		end
		$display("Warning: Program %s does not terminated within 100000 steps", testname);
	end
	endtask

	`define assert(signal, value) \
        if (signal !== value) begin \
            $display("ASSERTION FAILED in %m: expect %x, got %x", value, signal); \
            $stop; \
        end

	
	// 测试集
	initial
	begin : TB

		// 记录 core 模块以及其下 1 层子模块的所有变量波形
		$dumpfile("coredump.vcd");
		$dumpvars(1, core);
		$dumpvars(0, core.gprs.regs);

		$display("Start testing");

		reset();
		load("add.hex");
		run();
		`assert(core.gprs.regs[2], 144)
		`assert(core.gprs.regs[3], 102)


		reset();
		load("fib10.hex");
		run();
		`assert(core.gprs.regs[2], 89)


		reset();
		load("arich.hex");
		run();
		`assert(core.gprs.regs[5], 8)
		`assert(core.gprs.regs[6], 4)
		`assert(core.gprs.regs[7], 16)


		reset();
		load("lui.hex");
		run();
		`assert(core.gprs.regs[1], 32'ha0000000)
		`assert(core.gprs.regs[2], 32'ha0000001)
		`assert(core.gprs.regs[3], 32'ha0000002)


		reset();
		load("ldst.hex");
		run();
		`assert(core.gprs.regs[2], 32'h12345678)
		`assert(core.gprs.regs[3], 32'h12345678)
		`assert(core.gprs.regs[4], 32'h12345678)


		reset();
		load("jump.hex");
		run();
		`assert(core.gprs.regs[1], 21)
		`assert(core.gprs.regs[2], 8)
		`assert(core.gprs.regs[3], 0)
		`assert(core.gprs.regs[4], 32'h1c)
		`assert(core.gprs.regs[5], 0)
		`assert(core.gprs.regs[6], 0)
		`assert(core.gprs.regs[7], 0)


		reset();
		load("branch.hex");
		run();
		`assert(core.gprs.regs[1], 1)
		`assert(core.gprs.regs[2], -3)
		`assert(core.gprs.regs[5], 11)


		reset();
		load("fib_b.hex");
		run();
		`assert(core.gprs.regs[2], 10946)
		`assert(core.gprs.regs[5], 0)


		$dumpflush;
		$display("All test finished");
	end
endmodule
